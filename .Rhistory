rm(list = ls())
library(lme4)
library(lmerTest)
library(car)
library(emmeans)
library(MuMIn)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
model1 <- lmer(NL ~ Site*Year*Treatment + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
anova(model1, ddf = "Kenward-Roger")
pheno <- filter(pheno, Site == "LM" | Site == "UM" | Site == "LSA" | Site == "USA")
model1 <- lmer(NL ~ Site*Year*Treatment + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
rm(list = ls())
library(lme4)
library(lmerTest)
library(car)
library(emmeans)
library(MuMIn)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
str(pheno)
#make variables factors
pheno$Year <- as.factor(pheno$Year)
pheno$Site <- as.factor(pheno$Site)
pheno$PlotPair <- as.factor(pheno$PlotPair)
pheno$Plot_ID <- as.factor(pheno$Plot_ID)
pheno$Subplot_ID <- as.factor(pheno$Subplot_ID)
pheno$Treatment <- as.factor(pheno$Treatment)
pheno$Species <- as.factor(pheno$Species)
pheno$Functional.Type <- as.factor(pheno$Functional.Type)
pheno$Elevation <- as.integer(pheno$Elevation)
pheno$NL <- pheno$FLE - pheno$NL
pheno$FLE <- pheno$FOF - pheno$FLE
pheno$FOF <- pheno$FLCC - pheno$FOF
pheno$FLCC <- pheno$EOS - pheno$FLCC
pheno
rm(list = ls())
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(effects)
library(gridExtra)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
#make variables factors
pheno$Year <- as.factor(pheno$Year)
pheno$Site <- as.factor(pheno$Site)
pheno$PlotPair <- as.factor(pheno$PlotPair)
pheno$Plot_ID <- as.factor(pheno$Plot_ID)
pheno$Subplot_ID <- as.factor(pheno$Subplot_ID)
pheno$Treatment <- as.factor(pheno$Treatment)
pheno$Species <- as.factor(pheno$Species)
pheno$Functional.Type <- as.factor(pheno$Functional.Type)
pheno$Elevation <- as.integer(pheno$Elevation)
pheno <- select(pheno, -c(Plot, Subplot, Duplicate.Plot, FBB, FLB))
duration <- pheno
duration$NL <- duration$FLE - duration$NL
duration$FLE <- duration$FOF - duration$FLE
duration$FOF <- duration$FLCC - duration$FOF
duration$FLCC <- duration$EOS - duration$FLCC
#interaction plots
qplot(x = DOYsf, y = FLE, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = Elevation, y = FLE, color = factor(DOYsf), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
#interaction plots
qplot(x = DOYsf, y = NL, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = DOYsf, y = FOF, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = DOYsf, y = FLCC, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
rm(list = ls())
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
library(effects)
library(gridExtra)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
#make variables factors
pheno$Year <- as.factor(pheno$Year)
pheno$Site <- as.factor(pheno$Site)
pheno$PlotPair <- as.factor(pheno$PlotPair)
pheno$Plot_ID <- as.factor(pheno$Plot_ID)
pheno$Subplot_ID <- as.factor(pheno$Subplot_ID)
pheno$Treatment <- as.factor(pheno$Treatment)
pheno$Species <- as.factor(pheno$Species)
pheno$Functional.Type <- as.factor(pheno$Functional.Type)
pheno$Elevation <- as.integer(pheno$Elevation)
pheno <- select(pheno, -c(Plot, Subplot, Duplicate.Plot, FBB, FLB))
duration <- pheno
duration$NL <- duration$FLE - duration$NL
duration$FLE <- duration$FOF - duration$FLE
duration$FOF <- duration$FLCC - duration$FOF
duration$FLCC <- duration$EOS - duration$FLCC
#interaction plots
qplot(x = DOYsf, y = NL, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = DOYsf, y = FLE, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = DOYsf, y = FOF, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = DOYsf, y = FOF, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = DOYsf, y = FLCC, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
model1 <- lmer(NL ~ DOYsf*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
plot(effect(term = "DOYsf:Elevation", mod = model1, default.levels = 5), multiline = TRUE)
anova(model1, ddf = "Kenward-Roger")
pheno$sfe <- mutate(sfe = DOYsf*Elevation)
View(pheno)
pheno$sfe <- pheno$DOYsf*pheno$Elevation
View(pheno)
model1 <- lmer(NL ~ DOYsf*Elevation + sfe + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
View(pheno)
model1 <- lmer(NL ~ DOYsf*Elevation + Species + sfe + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
rm(list = ls())
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
library(effects)
library(gridExtra)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
#make variables factors
pheno$Year <- as.factor(pheno$Year)
pheno$Site <- as.factor(pheno$Site)
pheno$PlotPair <- as.factor(pheno$PlotPair)
pheno$Plot_ID <- as.factor(pheno$Plot_ID)
pheno$Subplot_ID <- as.factor(pheno$Subplot_ID)
pheno$Treatment <- as.factor(pheno$Treatment)
pheno$Species <- as.factor(pheno$Species)
pheno$Functional.Type <- as.factor(pheno$Functional.Type)
pheno$Elevation <- as.integer(pheno$Elevation)
pheno <- select(pheno, -c(Plot, Subplot, Duplicate.Plot, FBB, FLB))
duration <- pheno
duration$NL <- duration$FLE - duration$NL
duration$FLE <- duration$FOF - duration$FLE
duration$FOF <- duration$FLCC - duration$FOF
duration$FLCC <- duration$EOS - duration$FLCC
model1 <- lmer(NL ~ DOYsf*Elevation + Species (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
model1 <- lmer(NL ~ DOYsf*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
doysf <- data.frame(Yhat = predict(model1), pheno)
doysf <- data.frame(Yhat = predict(model1), pheno)
coef(summary(model1))
summary(model1)
summary(model2)
emtrends(model1, pairwise ~ Elevation, var="DOYsf")
emtrends(model1, pairwise ~ DOYsf, var="Elevation")
emtrends(model1, pairwise ~ Elevation)
emtrends(model1, pairwise ~ Elevation, var="Elevation")
emtrends(model1, pairwise ~ Elevation, var="DOYsf")
model1 <- lmer(NL ~ Treatment*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
anova(model1, ddf = "Kenward-Roger")
emtrends(model1, pairwise ~ Elevation, var="Treatment")
emtrends(model1, pairwise ~ Treatment, var="Elevation")
model1 <- lmer(NL ~ DOYsf*Site + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
anova(model1, ddf = "Kenward-Roger")
emtrends(model1, pairwise ~ Site, var="DOYsf")
model1 <- lmer(NL ~ Treatment*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
anova(model1, ddf = "Kenward-Roger")
emtrends(model1, pairwise ~ Treatment, var="Elevation")
model2 <- lmer(FLE ~ Treatment*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
emtrends(model2, pairwise ~ Treatment, var="Elevation")
model1 <- lmer(NL ~ DOYsf*Site + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
emtrends(model1, pairwise ~ Treatment, var="Elevation")
emtrends(model1, pairwise ~ Site, var="DOYsf")
rm(list = ls())
library(tidyverse)
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
library(effects)
library(gridExtra)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
library(gridExtra)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
pheno <- select(pheno, -c(Plot, Subplot, Duplicate.Plot, FBB, FLB))
pheno <- select(pheno, -c(Plot, Subplot, Duplicate.Plot, FBB, FLB))
pheno <- select(pheno, -c(Plot, Subplot, FBB, FLB))
duration <- pheno
duration$NL <- duration$FLE - duration$NL
duration$FLE <- duration$FOF - duration$FLE
duration$FOF <- duration$FLCC - duration$FOF
duration$FLCC <- duration$EOS - duration$FLCC
#interaction plots
qplot(x = DOYsf, y = NL, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = DOYsf, y = FLE, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = DOYsf, y = FOF, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
qplot(x = DOYsf, y = FLCC, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
rm(list = ls())
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
library(effects)
library(gridExtra)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
pheno$Year <- as.factor(pheno$Year)
pheno$Site <- as.factor(pheno$Site)
pheno$PlotPair <- as.factor(pheno$PlotPair)
pheno$Plot_ID <- as.factor(pheno$Plot_ID)
pheno$Subplot_ID <- as.factor(pheno$Subplot_ID)
pheno$Treatment <- as.factor(pheno$Treatment)
pheno$Species <- as.factor(pheno$Species)
pheno$Functional.Type <- as.factor(pheno$Functional.Type)
pheno$Elevation <- as.integer(pheno$Elevation)
pheno <- select(pheno, -c(Plot, Subplot, FBB, FLB))
duration <- pheno
duration$NL <- duration$FLE - duration$NL
duration$FLE <- duration$FOF - duration$FLE
duration$FOF <- duration$FLCC - duration$FOF
duration$FLCC <- duration$EOS - duration$FLCC
#interaction plots
qplot(x = DOYsf, y = NL, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
#interaction plots
qplot(x = DOYsf, y = NL, shape = Year, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
#interaction plots
qplot(x = DOYsf, y = NL, color = factor(Elevation), data = pheno) +
geom_smooth(method = lm, se = FALSE, fullrange = T)
model1 <- lmer(NL ~ DOYsf*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
plot(effect(term = "DOYsf:Elevation", mod = model1, default.levels = 5), multiline = TRUE)
model1 <- lmer(NL ~ DOYsf*Site + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
plot(effect(term = "DOYsf:Elevation", mod = model1, default.levels = 5), multiline = TRUE)
model4 <- lmer(FLE ~ DOYsf*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
plot(effect(term = "DOYsf:Elevation", mod = model2, default.levels = 5), multiline = TRUE)
plot(effect(term = "DOYsf:Elevation", mod = model4, default.levels = 5), multiline = TRUE)
model5 <- lmer(FOF ~ DOYsf*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
plot(effect(term = "DOYsf:Elevation", mod = model5, default.levels = 5), multiline = TRUE)
model6 <- lmer(FLCC ~ DOYsf*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
plot(effect(term = "DOYsf:Elevation", mod = model6, default.levels = 5), multiline = TRUE)
anova(model1, ddf = "Kenward-Roger")
anova(model1, ddf = "Kenward-Roger")
summary(model1)
model1 <- lmer(NL ~ DOYsf*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
rm(list = ls())
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
library(effects)
library(gridExtra)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
str(pheno)
#make variables factors
pheno$Year <- as.factor(pheno$Year)
pheno$Site <- as.factor(pheno$Site)
pheno$PlotPair <- as.factor(pheno$PlotPair)
pheno$Plot_ID <- as.factor(pheno$Plot_ID)
pheno$Subplot_ID <- as.factor(pheno$Subplot_ID)
pheno$Treatment <- as.factor(pheno$Treatment)
pheno$Species <- as.factor(pheno$Species)
pheno$Functional.Type <- as.factor(pheno$Functional.Type)
pheno$Elevation <- as.integer(pheno$Elevation)
pheno <- select(pheno, -c(Plot, Subplot, FBB, FLB))
duration <- pheno
duration$NL <- duration$FLE - duration$NL
duration$FLE <- duration$FOF - duration$FLE
duration$FOF <- duration$FLCC - duration$FOF
duration$FLCC <- duration$EOS - duration$FLCC
model1 <- lmer(NL ~ DOYsf*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
summary(model1)
model2 <- lmer(NL ~ DOYsf*Site + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
emtrends(model1, pairwise ~ Site, var="DOYsf")
emtrends(model2, pairwise ~ Site, var="DOYsf")
model7 <- lmer(FLE ~ DOYsf*Site + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
emtrends(model7, pairwise ~ Site, var="DOYsf")
model7 <- lmer(FOF ~ DOYsf*Site + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
emtrends(model7, pairwise ~ Site, var="DOYsf")
model3 <- lmer(NL ~ Treatment*Elevation + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
emtrends(model3, pairwise ~ Treatment, var="Elevation")
emtrends(model2, pairwise ~ Site, var="DOYsf", at=list(Treatment="Early")
emtrends(model2, pairwise ~ Site, var="DOYsf", at=list(Treatment="Early"))
emtrends(model2, pairwise ~ Site, var="DOYsf", at=list(Treatment = "Early"))
rm(list = ls())
library(lme4)
library(lme4)
library(lmerTest)
library(car)
library(emmeans)
library(MuMIn)
library(emmeans)
library(MuMIn)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
#make variables factors
pheno$Year <- as.factor(pheno$Year)
pheno$Site <- as.factor(pheno$Site)
pheno$PlotPair <- as.factor(pheno$PlotPair)
pheno$Plot_ID <- as.factor(pheno$Plot_ID)
pheno$Subplot_ID <- as.factor(pheno$Subplot_ID)
pheno$Treatment <- as.factor(pheno$Treatment)
pheno$Species <- as.factor(pheno$Species)
pheno$Functional.Type <- as.factor(pheno$Functional.Type)
pheno$Elevation <- as.integer(pheno$Elevation)
model0 <- lmer(DOYsf ~ Site*Year*Treatment + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
model0 <- lmer(DOYsf ~ Site*Year*Treatment + Species + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
anova(model0, ddf = "Kenward-Roger")
rm(list = ls())
## Date: 2020-04-10
## User: Chelsea Wilmer
## SFA/CSU Thesis
## Script: Calculating the timing of events for the effect the treatment
## Packages:
library(tidyverse)
####Bring in results data####
source("/Users/chelseawilmer/Desktop/Github/Phenology/stat_results.csv")
####Bring in results data####
source("/Users/chelseawilmer/Desktop/Github/Phenology/stat_results.csv")
####Bring in results data####
results <- read.csv("/Users/chelseawilmer/Desktop/Github/Phenology/stat_results.csv")
View(results)
?segmented
## Date: 2019-01-22
## User: Chelsea Wilmer
## US DOE Phenology Project
## Script: The purpose of this script is to bring in phenology data, explore, and clean up. and have fun.
## Packages:
library(tidyverse)
## 1. Bring in data ####
# Set your working directory
setwd("/Users/chelseawilmer/Desktop/Github/Phenology")
# Load data
pheno <- read.csv("PhenologyData_complete.csv", stringsAsFactors = FALSE, strip.white = TRUE)
# Look at dataset
str(pheno) #check column names, check data types
# Clean up column names
# Use rename to rename columns
# Rename all columns at once
pheno <- dplyr::rename(pheno, Veg.Type = Veg.type, Functional.Type = functional.type) # new name equals = old name
# Use select to remove unwanted columns
pheno <- dplyr::select(pheno, -c(SG, NL2, FLE2, FLD)) # drop variables that are not currently going to be used for analysis. May want to include these later
## 2. Explore data ####
# Look at columns for typos and potential outliers
unique(pheno$Year)
unique(pheno$Site)
unique(pheno$Block.Plot) # this column has extra plots that were established in 2018 because the original plots had not melted out; could be treated as duplicate plots or removed for analysis, or replace original plots; for now, we will indicate these as duplicate plots with a Y/N column 'Duplicate Plot'. Where "B2 2018" and "C1 2018" are YES and all other types are NO
# Check range of phenology observations for each phenophase
range(pheno$FBB, na.rm = TRUE)# because this phenophase isn't going to be used immediately we're going to ommit it.
range(pheno$NL, na.rm = T)
range(pheno$FLE, na.rm = T)
range(pheno$FOF, na.rm = T)
range(pheno$FLCC, na.rm = T) #DAYS OUT OF RANGE --> go back to data to check/correct
#### 3. Clean up data ####
## Rename sites
pheno$Site <- ifelse(test = pheno$Site == "Alpine", yes = "ALP", no = pheno$Site)
pheno$Site <- ifelse(test = pheno$Site == "Upper Sub-alpine", yes = "USA", no = pheno$Site)
pheno$Site <- ifelse(test = pheno$Site == "Lower Sub-alpine", yes = "LSA", no = pheno$Site)
pheno$Site <- ifelse(test = pheno$Site == "Upper Montane", yes = "UM", no = pheno$Site)
pheno$Site <- ifelse(test = pheno$Site == "Lower Montane", yes = "LM", no = pheno$Site)
## Add EOS dates to data
pheno$EOS <- 0
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "LM", 281, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "UM", 304, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "LSA", 304, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "USA", 282, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "ALP", 282, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "LM", 283, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "UM", 283, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "LSA", 283, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "USA", 281, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "ALP", 281, pheno$EOS)
## Add elevations
pheno$Elevation <- 0
pheno$Elevation <- ifelse(pheno$Site == "LM", 2774, pheno$Elevation)
pheno$Elevation <- ifelse(pheno$Site == "UM", 2957, pheno$Elevation)
pheno$Elevation <- ifelse(pheno$Site == "LSA", 3169, pheno$Elevation)
pheno$Elevation <- ifelse(pheno$Site == "USA", 3475, pheno$Elevation)
pheno$Elevation <- ifelse(pheno$Site == "ALP", 3597, pheno$Elevation)
## $Duplicate.Plot
pheno <- dplyr::rename(pheno, Duplicate.Plot = Block.Plot)
# use logical ifelse statement to assign new values
pheno$Duplicate.Plot <- ifelse(test = pheno$Duplicate.Plot == "B2 2018" | pheno$Duplicate.Plot == "C1 2018", yes = "Y", no = "N")
## $Treatment
# use logical statement to fill in blank values in the treatment column. I imported values without that info.
# no = pheno$Treatment allowed us to preserve previous data in the cells we didn't want to change
pheno$Treatment <- ifelse(test = pheno$Treatment == "", yes = "Treatment", no = pheno$Treatment)
## $Functional.Type
# Replace names 'Gram' and 'Grass' to 'Graminoid'
pheno$Functional.Type <- ifelse(test = pheno$Functional.Type == "Gram" | pheno$Functional.Type == "Grass", yes = "Graminoid", no = pheno$Functional.Type)
## $Species
# Order species data by alphabet to check for typos
species.list <- unique(pheno$Species) #pull out unique species as character vector
species.list <- sort(species.list) # sort alphabetically
# Correct errors in species list
pheno$Species <- ifelse(test = pheno$Species == "Fuzzy Forb  1", "Fuzzy Forb 1", pheno$Species)
pheno$Species <- ifelse(test = pheno$Species == "Hymenoxis", "Hymenoxys hoopesii", pheno$Species)
pheno$Species <- ifelse(test = pheno$Species == "Linum Lewisii", "Linum lewisii", pheno$Species)
pheno$Species <- ifelse(test = pheno$Species == "potentilla", "Potentilla sp. 2", pheno$Species)
pheno$Species <- ifelse(test = pheno$Species == "Valeriana sp.", "Valeriana edulis", pheno$Species)
#### NEXT STEP ####
# maybe split into separate data frames for each of the sites
# make grappppphhhhhsss
#write_csv(pheno, "/Users/chelseawilmer/Desktop/Watershed Function SFA/Phenology_Complete.csv")
min(pheno$NL)
min(pheno$NL, na.rm = T)
2017test <- filter(pheno, Year == 2017)
test <- filter(pheno, Year == 2017)
min(test$NL, na.rm = T)
max(pheno$FLCC, na.rm = T)
test <- filter(pheno, Year == 2018)
max(test, na.rm = T)
max(test$NL, na.rm = T)
max(test$FLCC, na.rm = T)
## Date: 2019-01-22
## User: Chelsea Wilmer
## US DOE Phenology Project
## Script: The purpose of this script is to bring in phenology data, explore, and clean up. and have fun.
## Packages:
library(tidyverse)
## 1. Bring in data ####
# Set your working directory
setwd("/Users/chelseawilmer/Desktop/Github/Phenology")
# Load data
pheno <- read.csv("PhenologyData_complete.csv", stringsAsFactors = FALSE, strip.white = TRUE)
# Look at dataset
str(pheno) #check column names, check data types
# Clean up column names
# Use rename to rename columns
# Rename all columns at once
pheno <- dplyr::rename(pheno, Veg.Type = Veg.type) # new name equals = old name
# Use select to remove unwanted columns
pheno <- dplyr::select(pheno, -c(SG, NL2, FLE2, FLD)) # drop variables that are not currently going to be used for analysis. May want to include these later
## 2. Explore data ####
# Look at columns for typos and potential outliers
unique(pheno$Year)
unique(pheno$Site)
unique(pheno$Block.Plot) # this column has extra plots that were established in 2018 because the original plots had not melted out; could be treated as duplicate plots or removed for analysis, or replace original plots; for now, we will indicate these as duplicate plots with a Y/N column 'Duplicate Plot'. Where "B2 2018" and "C1 2018" are YES and all other types are NO
# Check range of phenology observations for each phenophase
range(pheno$FBB, na.rm = TRUE)# because this phenophase isn't going to be used immediately we're going to ommit it.
range(pheno$NL, na.rm = T)
range(pheno$FLE, na.rm = T)
range(pheno$FOF, na.rm = T)
range(pheno$FLCC, na.rm = T) #DAYS OUT OF RANGE --> go back to data to check/correct
#### 3. Clean up data ####
## Rename sites
pheno$Site <- ifelse(test = pheno$Site == "Alpine", yes = "ALP", no = pheno$Site)
pheno$Site <- ifelse(test = pheno$Site == "Upper Sub-alpine", yes = "USA", no = pheno$Site)
pheno$Site <- ifelse(test = pheno$Site == "Lower Sub-alpine", yes = "LSA", no = pheno$Site)
pheno$Site <- ifelse(test = pheno$Site == "Upper Montane", yes = "UM", no = pheno$Site)
pheno$Site <- ifelse(test = pheno$Site == "Lower Montane", yes = "LM", no = pheno$Site)
## Add EOS dates to data
pheno$EOS <- 0
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "LM", 281, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "UM", 304, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "LSA", 304, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "USA", 282, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2017 & pheno$Site == "ALP", 282, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "LM", 283, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "UM", 283, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "LSA", 283, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "USA", 281, pheno$EOS)
pheno$EOS <- ifelse(pheno$Year == 2018 & pheno$Site == "ALP", 281, pheno$EOS)
## Add elevations
pheno$Elevation <- 0
pheno$Elevation <- ifelse(pheno$Site == "LM", 2774, pheno$Elevation)
pheno$Elevation <- ifelse(pheno$Site == "UM", 2957, pheno$Elevation)
pheno$Elevation <- ifelse(pheno$Site == "LSA", 3169, pheno$Elevation)
pheno$Elevation <- ifelse(pheno$Site == "USA", 3475, pheno$Elevation)
pheno$Elevation <- ifelse(pheno$Site == "ALP", 3597, pheno$Elevation)
## $Duplicate.Plot
pheno <- dplyr::rename(pheno, Duplicate.Plot = Block.Plot)
# use logical ifelse statement to assign new values
pheno$Duplicate.Plot <- ifelse(test = pheno$Duplicate.Plot == "B2 2018" | pheno$Duplicate.Plot == "C1 2018", yes = "Y", no = "N")
## $Treatment
# use logical statement to fill in blank values in the treatment column. I imported values without that info.
# no = pheno$Treatment allowed us to preserve previous data in the cells we didn't want to change
pheno$Treatment <- ifelse(test = pheno$Treatment == "", yes = "Treatment", no = pheno$Treatment)
## $Functional.Type
# Replace names 'Gram' and 'Grass' to 'Graminoid'
pheno$Functional.Type <- ifelse(test = pheno$Functional.Type == "Gram" | pheno$Functional.Type == "Grass", yes = "Graminoid", no = pheno$Functional.Type)
## $Species
# Order species data by alphabet to check for typos
species.list <- unique(pheno$Species) #pull out unique species as character vector
species.list <- sort(species.list) # sort alphabetically
# Correct errors in species list
pheno$Species <- ifelse(test = pheno$Species == "Fuzzy Forb  1", "Fuzzy Forb 1", pheno$Species)
pheno$Species <- ifelse(test = pheno$Species == "Hymenoxis", "Hymenoxys hoopesii", pheno$Species)
pheno$Species <- ifelse(test = pheno$Species == "Linum Lewisii", "Linum lewisii", pheno$Species)
pheno$Species <- ifelse(test = pheno$Species == "potentilla", "Potentilla sp. 2", pheno$Species)
pheno$Species <- ifelse(test = pheno$Species == "Valeriana sp.", "Valeriana edulis", pheno$Species)
#### NEXT STEP ####
# maybe split into separate data frames for each of the sites
# make grappppphhhhhsss
#write_csv(pheno, "/Users/chelseawilmer/Desktop/Watershed Function SFA/Phenology_Complete.csv")
write_csv(pheno, "/Users/chelseawilmer/Desktop/Watershed Function SFA/Phenology_Complete.csv")
rm(list = ls())
library(tidyverse)
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
library(lmerTest)
library(emmeans)
source("/Users/chelseawilmer/Desktop/Github/Phenology/Phenology.data.cleanup.R")
#make variables factors
pheno$Year <- as.factor(pheno$Year)
pheno$Site <- as.factor(pheno$Site)
pheno$PlotPair <- as.factor(pheno$PlotPair)
pheno$Plot_ID <- as.factor(pheno$Plot_ID)
pheno$Subplot_ID <- as.factor(pheno$Subplot_ID)
pheno$Treatment <- as.factor(pheno$Treatment)
pheno$Species <- as.factor(pheno$Species)
pheno$Functional.Type <- as.factor(pheno$Functional.Type)
pheno$Elevation <- as.integer(pheno$Elevation)
model1 <- lmer(NL ~ Site*Year*Treatment + Species + (1|Year) + (1|Site) + (1|Treatment) + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
anova(model1, ddf = "Kenward-Roger")
model1 <- lmer(NL ~ Year*Treatment + Species + (1|Year) + (1|Site) + (1|Treatment) + (1|PlotPair) + (1|Plot_ID) + (1|Subplot_ID), data = pheno)
